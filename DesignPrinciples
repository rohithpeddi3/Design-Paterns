
Design which is to be avoided:
1) Rigid - [Every change effects so many other parts of the system]
2) Fragile - [When a change is performed unexpected parts of the system break]
3) Immovable - [It is hard to reuse in other applications]

Open Close principle:
Software entities like classes, modules, functions should be open for extension and closed for modifications
[abstract classes whose behaviour can be used to implement concrete classes]

Dependency Inversion Principle:
High-level modules should not depend on the low level modules and both should depend on abstractions
Abstractions should not depend on details but details should depend on abstractions
[modules can be easily changed to other modules by just changing the dependancy module]

Interface Segregation Principle:
Should not be forced upon to use interfaces
[Methods not specific to it are called polluted or fat interfaces]

Single responsibility principle:
A class should have only one reason to change, one responsibility
[Many reasons to change we have to change or split the functionality of the class]

Liskov's substitution principle:
Derived types must be completely substitutable for their base types 
[New derived classes should be able to replace old classes without change of code]
