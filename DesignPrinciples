
Design which is to be avoided:
1) Rigid - [Every change effects so many other parts of the system]
2) Fragile - [When a change is performed unexpected parts of the system break]
3) Immovable - [It is hard to reuse in other applications]

Open Close principle:
Software entities like classes, modules, functions should be open for extension and closed for modifications
[abstract classes whose behaviour can be used to implement concrete classes]

Dependency Inversion Principle:
High-level modules should not depend on the low level modules and both should depend on abstractions
Abstractions should not depend on details but details should depend on abstractions
[]
